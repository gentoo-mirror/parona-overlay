Cherry-picked to 0.7.2 from https://github.com/flightlessmango/MangoHud/pull/1513

From: Alfred Wingate <parona@protonmail.com>
Date: Thu, 26 Dec 2024 22:08:21 +0200
Subject: [PATCH 1/3] Add library specific version scripts that match enabled
 features

LLD is stricter with version scripts and will complain about nonexisting
symbols in version files.

Signed-off-by: Alfred Wingate <parona@protonmail.com>
---
 src/mangohud.version           |  7 -------
 src/mangohud_dlsym.version     |  5 +++++
 src/mangohud_opengl.version.in |  6 ++++++
 src/meson.build                | 23 ++++++++++++++++++-----
 4 files changed, 29 insertions(+), 12 deletions(-)
 create mode 100644 src/mangohud_dlsym.version
 create mode 100644 src/mangohud_opengl.version.in

diff --git a/src/mangohud.version b/src/mangohud.version
index 5be0a29..be33d7f 100644
--- a/src/mangohud.version
+++ b/src/mangohud.version
@@ -3,12 +3,5 @@
   global:
     overlay_GetInstanceProcAddr;
     overlay_GetDeviceProcAddr;
-    glX*;
-    egl*;
-    dlsym;
-    mangohud_find_glx_ptr;
-    mangohud_find_egl_ptr;
-    wl_display_connect;
-    wl_display_connect_to_fd;
   local: *;
 };
diff --git a/src/mangohud_dlsym.version b/src/mangohud_dlsym.version
new file mode 100644
index 0000000..c10a14c
--- /dev/null
+++ b/src/mangohud_dlsym.version
@@ -0,0 +1,5 @@
+{
+    global:
+        dlsym;
+    local: *;
+};
diff --git a/src/mangohud_opengl.version.in b/src/mangohud_opengl.version.in
new file mode 100644
index 0000000..4b24139
--- /dev/null
+++ b/src/mangohud_opengl.version.in
@@ -0,0 +1,6 @@
+{
+    global:
+        @x11_symbols@
+        @wayland_symbols@
+    local: *;
+};
diff --git a/src/meson.build b/src/meson.build
index 9698b5b..82fca95 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -171,8 +171,6 @@ if is_unixy
 endif
 
 link_args = cc.get_supported_link_arguments(['-Wl,-Bsymbolic-functions', '-Wl,-z,relro', '-Wl,--exclude-libs,ALL', '-lGL', '-static-libstdc++'])
-# meson fails to check version-script so just force add
-link_args += '-Wl,--version-script,@0@'.format(join_paths(meson.current_source_dir(), 'mangohud.version'))
 
 mangohud_static_lib = static_library(
   'MangoHud',
@@ -214,11 +212,25 @@ mangohud_shared_lib = shared_library(
   'MangoHud',
   objects: mangohud_static_lib.extract_all_objects(),
   link_with: mangohud_static_lib,
-  link_args : link_args,
+  link_args : [link_args, '-Wl,--version-script,@0@'.format(join_paths(meson.current_source_dir(), 'mangohud.version'))],
   install_dir : libdir_mangohud,
   install: true
 )
 
+mangohud_opengl_syms = configuration_data()
+if get_option('with_x11').enabled()
+  mangohud_opengl_syms.set('x11_symbols', 'glX*; mangohud_find_glx_ptr;')
+endif
+if get_option('with_wayland').enabled()
+  mangohud_opengl_syms.set('wayland_symbols', 'egl*; mangohud_find_egl_ptr; wl_display_connect; wl_display_connect_to_fd;')
+endif
+
+mangohud_opengl_version_file = configure_file(
+  input: 'mangohud_opengl.version.in',
+  output: 'mangohud_opengl.version',
+  configuration: mangohud_opengl_syms,
+)
+
 mangohud_opengl_shared_lib = shared_library(
   'MangoHud_opengl',
   mangohud_version,
@@ -247,8 +259,9 @@ mangohud_opengl_shared_lib = shared_library(
     json_dep,
     implot_dep],
   include_directories : [inc_common],
-  link_args : link_args,
+  link_args : [link_args, '-Wl,--version-script,@0@'.format(join_paths(meson.current_build_dir(), 'mangohud_opengl.version'))],
   link_with: mangohud_static_lib,
+  link_depends: mangohud_opengl_version_file,
   install_dir : libdir_mangohud,
   install: true
 )
@@ -270,7 +283,7 @@ if is_unixy
     gnu_symbol_visibility : 'hidden',
     dependencies : [dep_dl],
     include_directories : [inc_common],
-    link_args : link_args,
+    link_args : [link_args, '-Wl,--version-script,@0@'.format(join_paths(meson.current_source_dir(), 'mangohud_dlsym.version'))],
     link_with: mangohud_static_lib,
     install_dir : libdir_mangohud,
     install : true
-- 
2.47.1


From 65c9f457a2d829753f407ed87fecab2a62d02fb1 Mon Sep 17 00:00:00 2001
From: Alfred Wingate <parona@protonmail.com>
Date: Thu, 26 Dec 2024 23:01:54 +0200
Subject: [PATCH 2/3] Do not append -static-libc++ to linker_args when libcxx
 is used

Clang has a long standing bug where it will try to mix c++ libraries
instead of erroring out early or transparently linking against libcxx
statically instead.

Signed-off-by: Alfred Wingate <parona@protonmail.com>
---
 src/meson.build | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/src/meson.build b/src/meson.build
index 82fca95..64b722e 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -170,7 +170,23 @@ if is_unixy
   endif
 endif
 
-link_args = cc.get_supported_link_arguments(['-Wl,-Bsymbolic-functions', '-Wl,-z,relro', '-Wl,--exclude-libs,ALL', '-lGL', '-static-libstdc++'])
+link_args = cpp.get_supported_link_arguments(['-Wl,-Bsymbolic-functions', '-Wl,-z,relro', '-Wl,--exclude-libs,ALL', '-lGL'])
+
+# Approach for libc++ detection taken from https://github.com/mesonbuild/meson/commit/675b47b0692131fae974298829ba807d730ab098
+# Rationale for the approach is explained in this SO answer https://stackoverflow.com/a/31658120
+if cpp.has_header('<version>')
+  header = 'version'
+else
+  header = 'ciso646'
+endif
+is_libcxx = cpp.has_header_symbol(header, '_LIBCPP_VERSION')
+
+# https://github.com/llvm/llvm-project/issues/38622
+if is_libcxx
+  message('Detected libcxx, not appending -static-libstc++ to linker arguments')
+else
+  link_args+=['-static-libstdc++']
+endif
 
 mangohud_static_lib = static_library(
   'MangoHud',
-- 
2.47.1


From 5a0ecc516cc9cfdaaf6403174c42929639b3c933 Mon Sep 17 00:00:00 2001
From: Alfred Wingate <parona@protonmail.com>
Date: Thu, 26 Dec 2024 23:33:17 +0200
Subject: [PATCH 3/3] Inherit cmocka after c++ system headers due to symbol
 conflicts

LLVM alternative C++ standard library is happier if it can hide its own
symbols first without preprocessor macros complicating things.

FAILED: amdgpu.p/tests_test_amdgpu.cpp.o
clang++ -Iamdgpu.p -I. -I.. -I../include -I../subprojects/spdlog-1.14.1/include -Isubprojects/implot-0.16 -I../subprojects/implot-0.16 -Isubprojects/imgui-1.89.9 -I../subprojects/imgui-1.89.9 -I../subprojects/imgui-1.89.9/backends -fdiagnostics-color=always -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -std=c++14 -O3 -Werror=missing-declarations -Werror=return-type -Wno-unused-parameter -Qunused-arguments -fno-math-errno -fno-trapping-math -Wno-non-virtual-dtor -Wno-missing-field-initializers -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS '-DPACKAGE_VERSION="v0.7.2"' -DSPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_DEBUG -D_GNU_SOURCE -DHAVE_PTHREAD -DUSE_GCC_ATOMIC_BUILTINS -DHAVE_TIMESPEC_GET -DHAVE___BUILTIN_BSWAP32 -DHAVE___BUILTIN_BSWAP64 -DHAVE___BUILTIN_CLZ -DHAVE___BUILTIN_CLZLL -DHAVE___BUILTIN_CTZ -DHAVE___BUILTIN_EXPECT -DHAVE___BUILTIN_FFS -DHAVE___BUILTIN_FFSLL -DHAVE___BUILTIN_POPCOUNT -DHAVE___BUILTIN_POPCOUNTLL -DHAVE___BUILTIN_UNREACHABLE -O2 -pipe '-DIMGUI_API=__attribute__((visibility("default")))' -pthread -DSPDLOG_COMPILED_LIB -DTEST_ONLY -MD -MQ amdgpu.p/tests_test_amdgpu.cpp.o -MF amdgpu.p/tests_test_amdgpu.cpp.o.d -o amdgpu.p/tests_test_amdgpu.cpp.o -c ../tests/test_amdgpu.cpp
In file included from ../tests/test_amdgpu.cpp:9:
In file included from ../tests/../src/amdgpu.h:6:
In file included from ../tests/../src/overlay_params.h:6:
In file included from /usr/include/c++/v1/vector:3023:
In file included from /usr/include/c++/v1/locale:212:
/usr/include/c++/v1/ios:343:30: error: expected parameter declarator
  343 |   _LIBCPP_HIDE_FROM_ABI bool fail() const;
      |                              ^
/usr/include/cmocka.h:1616:22: note: expanded from macro 'fail'
 1616 | #define fail() _fail(__FILE__, __LINE__)
      |                      ^
<scratch space>:2:1: note: expanded from here
    2 | "/usr/include/c++/v1/ios"

Signed-off-by: Alfred Wingate <parona@protonmail.com>
---
 tests/test_amdgpu.cpp | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/tests/test_amdgpu.cpp b/tests/test_amdgpu.cpp
index 308c20b..6da07e5 100644
--- a/tests/test_amdgpu.cpp
+++ b/tests/test_amdgpu.cpp
@@ -2,12 +2,14 @@
 #include <stddef.h>
 #include <setjmp.h>
 #include <stdint.h>
-extern "C" {
-#include <cmocka.h>
-}
 #include "stdio.h"
 #include "../src/amdgpu.h"
 #include "../src/cpu.h"
+// cmocka and libc++ have clashing symbols which causes issues if the symbols
+// are defined before libc++ can hide its own with _LIBCPP_HIDE_FROM_ABI.
+extern "C" {
+#include <cmocka.h>
+}
 
 #define UNUSED(x) (void)(x)
 
-- 
2.47.1

